{% extends "base.njk" %}
{% set title = "Point History" %}

{% block content %}
<nav aria-label="breadcrumb">
	<ol class="breadcrumb">
		<li class="breadcrumb-item"><a href="/admin">Admin</a></li>
		<li class="breadcrumb-item active" aria-current="page">Point History</li>
	</ol>
</nav>

<table class="table coalition-colored">
	<thead>
		<th scope="col">Date</th>
		<th scope="col">Coalition</th>
		<th scope="col">Points</th>
		<th scope="col">User</th>
		<th scope="col">Reason</th>
		<th scope="col">Type</th>
		<th scope="col">Intra Type ID</th>
		<th scope="col">Intra Score ID</th>
		<th scope="col text-end" style="text-align: end;">Actions</th> <!-- for some reason the text-end class doesn't work here -->
	</thead>
	<tbody>
		{% for score in scores %}
			<tr style="background: {{ coalitions[score.coalition_id].intra_coalition.color | rgba(0.25) }}">
				<td title="{{ score.created_at }}">{{ score.created_at | timeAgo }}</td>
				<td>{{ coalitions[score.coalition_id].intra_coalition.name }}</td>
				<td>{{ score.amount }}</td>
				<td>{{ score.user.intra_user.login }}</td>
				<td style="white-space: normal; word-wrap: break-word;">{{ score.reason }}</td>
				<td>{{ score.fixed_type_id if score.fixed_type_id else "" }}</td>
				<td>{{ score.type_intra_id if score.type_intra_id else "" }}</td>
				<td>{{ score.intra_score_id if score.intra_score_id else "not yet synced" }}</td>
				<td class="text-end" style="white-space: nowrap;">
					<a href="/admin/points/history/{{ score.id }}/sync" class="btn btn-sm btn-outline-secondary" title="Force synchronize with Intra" onclick="buttonHandler(event)" data-text="Sync">Sync</a>
					<a href="/admin/points/history/{{ score.id }}/recalculate" class="btn btn-sm btn-outline-warning" title="Force recalculate this score with the current point system settings" onclick="buttonHandler(event)" data-text="Recalculate">Recalculate</a>
					<a href="/admin/points/history/{{ score.id }}/delete" class="btn btn-sm btn-outline-danger" title="Remove this score and act like it never happened" onclick="buttonHandler(event)" data-text="Delete">Delete</a>
				</td>
			</tr>
		{% endfor %}
	</tbody>
</table>
<script>
function buttonHandler(event) {
	event.preventDefault();

	const button = event.target;

	// add spinner to button
	const originalText = event.target.getAttribute('data-text');
	button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> ' + originalText;
	button.disabled = true;

	// remove existing tooltip if one exists on the button
	const tooltip = bootstrap.Tooltip.getInstance(button);
	if (tooltip) {
		tooltip.dispose();
	}
	button.setAttribute('data-bs-toggle', '');
	button.setAttribute('data-bs-placement', '');
	button.setAttribute('title', '');

	const href = button.href;
	fetch(href, {
		method: 'GET',
		headers: {
			'Content-Type': 'application/json',
		},
	})
	.then(response => response.json())
	.then(data => {
		if (data.error) {
			console.error(`Error calling ${href}: `, data.error);

			// restore button
			button.innerText = `⚠ ${originalText}`;
			button.disabled = false;
			button.classList.add('btn-danger'); // add red inner color

			// add tooltip with error message
			button.setAttribute('data-bs-toggle', 'tooltip');
			button.setAttribute('data-bs-placement', 'top');
			button.setAttribute('title', `An error occurred: ${data.error}`);
			new bootstrap.Tooltip(button);

			return;
		}

		console.log(data);

		// restore button
		button.classList.add('btn-success'); // add green inner color
		button.innerText = `✓ ${originalText}`;
		button.disabled = false;
	})
	.catch((error) => {
		console.error(`Error calling ${href}: `, error);

		// restore button
		button.innerText = `⚠ ${originalText}`;
		button.disabled = false;
		button.classList.add('btn-danger'); // add red inner color

		// add tooltip with error message
		button.setAttribute('data-bs-toggle', 'tooltip');
		button.setAttribute('data-bs-placement', 'top');
		button.setAttribute('title', `An error occurred: ${error}`);
		new bootstrap.Tooltip(button);
	});
	return false;
}
</script>
{% endblock %}
